: '
DOCKER#
docker build -t <name>:<version> <path/to/dockerfile> # Build docker image#
docker run -p <host_port_to_use>:<cont_port_to_expose> <img_tag> # Run container from image with name[:version] as image tag and expose port#
docker exec -it <container name> /bin/bash
docker container prune # Removes all stopped containers#
docker image prune # Cleans up dangling images (not tagged not referenced by any container)#
docker image prune -a # Removes all images which are not used by existing containers#
'

alias d='docker' # Short for docker
# load bash completion for d
_completion_loader docker
complete -F _docker d

function go2d() # Build stat. linked GO binary & build docker image as <folder name>:<input|"latest"> as tag
{
  echo 'go build start'
  CGO_ENABLED=0 go build -ldflags='-w -extldflags "-static"' -a -tags netgo
  echo 'go build finished'
  
  version='latest'
  if [ -n "$1" ]; then
    version=$1
  fi
  docker build -t ${PWD##*/}:${version} .
}

function dbash() # Enter /bin/bash in container named <input>
{
  docker exec -it $1 /bin/bash
}

function startdocker() # Start all Docker services
{
  sudo systemctl start docker.service
}

function stopdocker() # Stop all Docker services
{
  sudo systemctl stop docker.service
  echo "docker.service stopped"
  sudo systemctl stop docker.socket
  echo "docker.socket stopped"
}

#
